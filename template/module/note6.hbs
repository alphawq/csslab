<div class="u-col">
	<div class="u-block">
		<h3>布局I<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>-</span>] 列表</h4>
			<ul>
				<li><a href="">list-style</a><span>[简写] img position type,无序列表ul,有序列表ol,自定义列表dl
						<br>可以用列表来进行布局,清除列表样式ul设置list-style:none,ul{padding:0,margin:0}
						<br>如标记为图片时一般用背景图来替代
						</span></li>
				<li><a href="">list-style-type</a>
						<span>仅作用于具有display值等于list-item的对象（如li对象）,如修改display值后不再显示(设置为块或其他特性均消失标记).
						<br>注意：ol,ul,dl对象的type特性为其后的所有列表项目（如li对象）指明列表属性。
						<br>此样式也可应用于counter计数器样式
						<table>
						<tbody>
						<tr>
						<th>值</th>
						<th>描述</th>
						</tr>
						<tr>
						<td>none</td>
						<td>无标记。</td>
						</tr>
						<tr>
						<td>disc（默认）</td>
						<td>实心圆。</td>
						</tr>
						<tr>
						<td>circle</td>
						<td>空心圆。</td>
						</tr>
						<tr>
						<td>square</td>
						<td>实心方块。</td>
						</tr>
						<tr>
						<td>decimal</td>
						<td>数字。( 1,2,3…… )</td>
						</tr>
						<tr>
						<td>decimal-leading-zero</td>
						<td>0开头的数字标记。( 01,02,03…… )</td>
						</tr>
						<tr>
						<td>lower-roman</td>
						<td>小写罗马数字(i, ii, iii, iv, v, 等。)</td>
						</tr>
						<tr>
						<td>upper-roman</td>
						<td>大写罗马数字(I, II, III, IV, V, 等。)</td>
						</tr>
						<tr>
						<td>lower-alpha</td>
						<td>小写英文字母The marker is lower-alpha (a, b, c, d, e, 等。)</td>
						</tr>
						<tr>
						<td>upper-alpha</td>
						<td>大写英文字母The marker is upper-alpha (A, B, C, D, E, 等。)</td>
						</tr>
						<tr>
						<td>lower-greek</td>
						<td>小写希腊字母(alpha, beta, gamma, 等。)</td>
						</tr>
						<tr>
						<td>lower-latin</td>
						<td>小写拉丁字母(a, b, c, d, e, 等。)</td>
						</tr>
						<tr>
						<td>upper-latin</td>
						<td>大写拉丁字母(A, B, C, D, E, 等。)</td>
						</tr>
						<tr>
						<td>hebrew</td>
						<td>传统的希伯来编号方式</td>
						</tr>
						<tr>
						<td>armenian</td>
						<td>传统的亚美尼亚编号方式</td>
						</tr>
						<tr>
						<td>georgian</td>
						<td>传统的乔治亚编号方式(an, ban, gan, 等。)</td>
						</tr>
						<tr>
						<td>cjk-ideographic</td>
						<td>简单的表意数字</td>
						</tr>
						<tr>
						<td>hiragana</td>
						<td>标记是：a, i, u, e, o, ka, ki, 等。（日文片假名）</td>
						</tr>
						<tr>
						<td>katakana</td>
						<td>标记是：A, I, U, E, O, KA, KI, 等。（日文片假名）</td>
						</tr>
						<tr>
						<td>hiragana-iroha</td>
						<td>标记是：i, ro, ha, ni, ho, he, to, 等。（日文片假名）</td>
						</tr>
						<tr>
						<td>katakana-iroha</td>
						<td>标记是：I, RO, HA, NI, HO, HE, TO, 等。（日文片假名）</td>
						</tr>
						</tbody>
						</table>
							
						</span></li>
				<li><a href="">list-style-image</a>
						<span>list-style-image:url(img.png) 
						<br>定位位置上会有问题.以文字中线开始显示图片.
						<br>并且也只当li依旧为list-item特性时才有效.
						<br>一般使用背景图来制作列表背景.</span></li>
				<li><a href="">list-style-position</a><span>
						<strong>指标记的内外方式,而非(图片)标记坐标位置</strong>
						<br><b>outside</b>：列表项目标记放置在文本以外，且环绕文本不根据标记对齐（默认值）
						<br>1.当type在outside时,如RESET样式中设置ul的padding:0,则会看不到type图标(无论li是否设置padding);如设置ul的padding(例如)小于20,则type图标将会溢出在ul之外.
						<br>2.如设置li的padding-left,则标记位置不更改,而标记与内容之间拉开间距
						<br>3.如设置li的margin-left,则margin继承到标记之外,标记与父级拉开间距
						<hr><b>inside</b>：列表项目标记放置在文本以内，且环绕文本根据标记对齐。<a href="http://css.doyoe.com/properties/list/list-style-position.htm">[查看演示]</a>
						<br>1.当type在inside时,type会和文字一起距离浏览器默认padding缩进,设置padding:0时,则会贴边显示.
						<br>2.设置li的padding-left和margin-left视觉表现都为标记之外与父级拉开间距
						</span></li>
			</ul>
			<h4>[<span>-</span>] 表格</h4>
			<ul>
				<li><a href="">table-layout</a><span>
					适用于：table系元素。
					<br>auto:默认的自动算法。布局将基于各单元格的内容，换言之，可能你给某个单元格定义宽度为100px，但结果可能并不是100px。表格在每一单元格读取计算之后才会显示出来，速度很慢
					<br>fixed：固定布局的算法。在这算法中，水平布局是仅仅基于表格的宽度，表格边框的宽度，单元格间距，列的宽度，而和表格内容无关。也就是说，内容可能被裁切
					<br /><a href="http://www.zhangxinxu.com/wordpress/2014/04/%E8%87%AA%E9%80%82%E5%BA%94%E8%A1%A8%E6%A0%BC-%E5%AD%97%E7%AC%A6%E6%8D%A2%E8%A1%8C-%E6%BA%A2%E5%87%BA%E7%82%B9%E7%82%B9%E7%82%B9-table-text-overflow-ellipsis-word-wrap-break-all/">关于text-overflow在单元格中的失效</a>
				</span></li>
				<li><a href="">border-collapse</a><span>
						separate：边框独立
						<br>collapse：相邻边被合并
						<br>只有当表格边框独立（即border-u-collapse属性等于separate时），border-spacing和empty-cells才起作用。
				</span></li>
				<li><a href="">border-spacing</a><span>
					该属性作用等同于标签属性cellspacing(单元格边距)。border-spacing:0等同于cellspacing="0"
					<br>如果提供全部两个length值时，第一个作用于横向间距，第二个作用于纵向间距。
					<br>如果只提供一个length值时，这个值将作用于横向和纵向上的间距。
					<br>*一般将此值与表格内标签属性cellpadding,cellspacing均设为0,通过CSS边距来控制.
				</span></li>
				<li><a href="">caption-side</a><span>
					top：指定caption在表格上边（默认）
					<br>bottom：指定caption在表格下边
					<br>要在IE7及以下浏览器中实现top与bottom参数值的效果，可直接在caption标签内定义标签属性valign为top和bottom。
				</span></li>
				<li><a href="">empty-cells</a>
					<span>show：指定当表格的单元格无内容时，显示该单元格的边框。（默认）
					<br>hide：指定当表格的单元格无内容时，隐藏该单元格的边框。
					<br>IE7及以下浏览器中默认隐藏无内容的单元格边框，要想使其获得与show参数值相同的效果，可以变相给该空单元格加个占位且不可见的元素，例如全角空格或\&nbsp;等等。
					</span></li>
			</ul>
			<h4>[<span>+</span>] 其他</h4>
			<ul style="display:none">
				<li>
					<a href="">p/div</a>
					<span>
						充分利用p,h1-h6等标签进行语义化.<b>但不要在p中放置h1-h6,结构出错。</b>
					</span>
				</li>
				<li>
					<a href="">h1-h6</a>
					<span>
						在H内部直接放置浮动右元素，IE7会换行，改用position定位
					</span>
				</li>
				<li>
					<a href="">ul/li</a>
					<span>
						1.用ul+li打造table效果时,可以自适应宽度换行,边框设置的方式,设置全框,负margin,可规避padding及屏幕尺寸变化问题.<br>
						2.IE6下ul默认表现为block，浮动后依旧占据100%，即使父级浮动，需要自身表现为dbi或fl（设置为dbi如果没有压缩html会出现空格），即用到ul,li来构造布局时，注意给ul,li添加浮动hack。<br>
						3.在ul,li布局时，如非标准结构，在IE67中可能会解析错误导致bug，当非标准结构时建议使用div替代ul,li。<br>
						4.ul表现为dbi在部分原生IE8中可能有渲染bug，添加margin强制渲染占据宽度。
					</span>
				</li>
				<li>
					<a href="">table</a>
					<span>
						1.表格中插div会脱离表格在外<br />
						2.表格中对合并后 或tr 表现为block,会只有第一个单元格宽度,可直接应用arrow,tr的显示应用table-row而非block<br />
						3.垂直th添加scope="u-col"
					</span>
				</li>
				<li>
					<a href="">a</a>
					<span>
						a <br>		
						1.IE10-对于a与同级元素，空的a调整层级或顺序仍然无法点击，需要将a包裹其他元素<br>
						2.在平板中a标签中包含:hover触发改变display:none/block的元素，旧平板无法点击，将display切换改为透明度更改并可能需要修改ie78的filter值<br>
					</span>
				</li>
				<li>
					<a href="">form</a>
					<span>
						1.IE6-8表单元素默认不继承父级字体大小.<br />
						2.IE6-8表单控件元素不继承form字体行高.
					</span>
				</li>
				<li>
					input <a href="">radio/checkbox</a>
					<span>
						1.单复选框的对齐问题,可用vertical-algin:-3px解决。<a href="http://www.zhangxinxu.com/wordpress/?p=56">参考资料</a>
					</span>
				</li>
				<li>
					input <a href="">text</a>
					<span>
						1.IE6-8中,input text不会因为行高而撑开高度,按钮正常
						<br />2.IE6-7中,对input设置text-indent会整个缩进,应设为padding
						<br />3.input默认为border-box模型，宽高包含padding与border！
					</span>
				</li>
				<li>
					<a href="">button</a>
					<span>
						1.Chrome中,input button不会因行高而撑开高度,text正常
					</span>
				</li>
				<li>
					<a href="">select</a>
					<span>
						0.最小高度24px.
						<br>1.chrome等可直接通过行高撑开高度，IE8-不可.
						<br>2.IE8需要通过padding，但使用padding方法时，IE8-绘制border会把里面按钮也绘制。
						<br>3.IE7需要设置height，但行高仍然无法使字体垂直居中。
						<br>4.IE6无法撑开高度。
						<br>5.height非字体height，而是包含了padding,border的height，默认为border-box。 
						<br>6.右侧padding在IE中(包括11)会出现在下拉按钮以外，故不应设置过大。
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>] Flex</h4>
			<ul>
				<li>flex<a href=""></a>
					<span>
						<a href="http://www.w3cplus.com/css3/a-visual-guide-to-css3-flexbox-properties.html">教程</a> | 
						<a href="http://www.w3cplus.com/css3/a-guide-to-flexbox-new.html">兼容旧版box教程</a>
						<br><a href="http://demo.agektmr.com/flexbox/">在线调试flexbox布局效果</a>
						<br>display:flex/inline-flex;
						<br>注意：
						<br>所有column-*属性在flex容器上都不生效;flex容器上不能使用::first-line和::first-letter伪元素。
						<br>float，clear和vertical-align属性应用在flex项目上将会无效和无法将其out-of-flow。
					</span>
				</li>
				<li>box <a href="">flex-direction</a>
					<span>该属性设置在flex元素上，非flex项目上。
						<br>row：横向从左到右排列（左对齐），默认的排列方式。
						<br>row-reverse：反转横向排列（右对齐，从后往前排，最后一项排在最前面。
						<br>column：纵向排列。
						<br>row-reverse：反转纵向排列，从后往前排，最后一项排在最上面。
						<br>注意：row和row-reverse依赖其写作模式，如果在rtl上下文方式下，他们都将分别被逆转。
					</span>
				</li>
				<li>box <a href="">flex-wrap</a>
					<span>nowrap：flex容器为单行。该情况下flex子项可能会溢出容器
					<br>wrap：flex容器为多行。该情况下flex子项溢出的部分会被放置到新行，子项内部会发生断行
					<br>wrap-reverse：反转 wrap 排列。</span>
				</li>
				<li>box <a href="">flex-flow</a><span>
					这个属性是flex-direction和flex-wrap属性的简写，默认值：row nowrap。
				</span></li>
				<li>box <a href="">justify-content</a><span>
					水平方向项目的分布方式。
				</span></li>
				<li>box <a href="">align-items</a><span>
					垂直方向单行项目的分布方式。
				</span></li>
				<li>box <a href="">align-content</a><span>
					垂直方向多行项目的分布方式。
				</span></li>
				<li>item <a href="">align-self</a><span>指定flex项目自身的对齐方式或者使用align-items来指定单个flex项目。
					<br>auto：如果'align-self'的值为'auto'，则其计算值为元素的父元素的'align-items'值，如果其没有父元素，则计算值为'stretch'。
					<br>flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。
					<br>flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。
					<br>center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。
					<br>baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与'flex-start'等效。其它情况下，该值将参与基线对齐。
					<br>stretch：如果指定侧轴大小的属性值为'auto'，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照'min/max-width/height'属性的限制。
				</span></li>
				<li>item <a href="">order</a>
					<span>用整数值来定义排列顺序，数值小的排在前面。可以为负值，默认值0。</span>
				</li>
				<li>item <a href="">flex-grow</a>
					<span>剩余空间的扩展比例,默认值0。
					<br>flex-grow的默认值为0，如果没有显示定义该属性，是不会拥有分配剩余空间权利的。</span>
				</li>
				<li>item <a href="">flex-shrink</a>
					<span>剩余空间的收缩比例,默认1。
					<br>默认情况之下，所有flex项目都可以收缩，但如果将它们设置为0时，他们不会缩小会保持原来的大小。</span>
				</li>
				<li>item <a href="">flex-basis</a>
					<span>如果所有子元素的基准值之和大于剩余空间，则会根据每项设置的基准值，按比率伸缩剩余空间</span>
				</li>
				<li>item <a href="">flex</a>
					<span>
						这个属性是flex-grow、flex-shrink和flex-basis属性的简写。
						<br>none：none关键字的计算值为: 0 0 auto
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>] Grid</h4>
			<ul style="display:none;">
				<li>grid<a href=""></a>
					<span>
					<a href="https://css-tricks.com/snippets/css/complete-guide-grid/">教程</a>
					<br>display: grid | inline-grid | subgrid;
					<br>注意：
					<br>grid盒子上column,float,clear,vertical-align都没有效果。
					</span>
				</li>
				<li>box <a href="">grid-template-columns</a>
					<span>grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];
					<br>grid-template-columns: repeat(3, 20px [col-start]) 5%;
					<br>grid-template-columns: 1fr 1fr 1fr;
					</span>
				</li>
				<li>box <a href="">grid-template-rows</a>
					<span>grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];</span>
				</li>
				<li>box <a href="">grid-template-areas</a>
					<span>
						grid-template-areas: "&lt;grid-area-name&gt; | . | none | ..."
                       <br>"..."
					</span>
				</li>
				<li>box <a href="">grid-column-gap</a>
					<span>grid-column-gap: 10px;</span>
				</li>
				<li>box <a href="">grid-row-gap</a>
					<span>grid-row-gap: 15px;</span>
				</li>
				<li>box <a href="">grid-gap</a>
					<span>grid-gap: &lt;grid-column-gap&gt; &lt;grid-row-gap&gt;;</span>
				</li>
				<li>box <a href="">justify-items</a>
					<span>水平方向网格内容的对齐方式。
					<br>justify-items: start | end | center | stretch;</span>
				</li>
				<li>box <a href="">align-items</a>
					<span>垂直方向网格内容的对齐方式。
					<br>align-items: start | end | center | stretch;</span>
				</li>
				<li>box <a href="">justify-content</a>
					<span>水平方向网格的分布方式。
					<br>justify-content: start | end | center | stretch | space-around | space-between | space-evenly;</span>
				</li>
				<li>box <a href="">align-content</a>
					<span>垂直方向网格的分布方式。
					<br>align-content: start | end | center | stretch | space-around | space-between | space-evenly;</span>
				</li>
				<li>box <a href="">grid-auto-columns</a>
					<span>定义隐式自动创建的网格大小
					<br>grid-template-columns: 60px 60px;</span>
				</li>
				<li>box <a href="">grid-auto-rows</a>
					<span>定义隐式自动创建的网格大小
					<br>grid-template-rows: 90px 90px</span>
				</li>
				<li>box <a href="">grid-auto-flow</a>
					<span>定义隐式自动创建的网格大小
					<br>grid-auto-flow: row | column | row dense | column dense</span>
				</li>
				<li>box <a href="">grid</a>
					<span>
					<pre><code class="less">
					grid: 200px auto / 1fr auto 1fr;

                    grid-template-rows: 200px auto;
                    grid-template-columns: 1fr auto 1fr;
                    grid-template-areas: none;
                    </code></pre>
					</span>
				</li>
				<li>item <a href="">grid-column-start</a>
					<span></span>
				</li>
				<li>item <a href="">grid-column-end</a>
					<span></span>
				</li>
				<li>item <a href="">grid-row-start</a>
					<span></span>
				</li>
				<li>item <a href="">grid-row-end</a>
					<span></span>
				</li>
				<li>item <a href="">grid-column</a>
					<span></span>
				</li>
				<li>item <a href="">grid-row</a>
					<span></span>
				</li>
				<li>item <a href="">grid-area</a>
					<span></span>
				</li>
				<li>item <a href="">justify-self</a>
					<span></span>
				</li>
				<li>item <a href="">align-self</a>
					<span></span>
				</li>
			</ul>
			<h4>[<span>-</span>] 多列</h4>
			<ul>
				<li><a href="">columns</a>(Npx [M])
						<span>多列,简写时注意加<strong>s</strong>,简写中只含宽度(带单位,不能百分比)和列数.Chrome需要前缀-webkit-
						<br>应用于除table外的非替换块级元素，display:table-cell 元素, 内联块元素。
						<br>实现多列的是里面的内容,而非自身.
						<br>简写方式一：设置width,column:200px 3（固定3列200宽。）
						<br>简写方式二：column:200px （自动根据父级宽度生成X列）
						<br>同时指定2个值时，优先先按列数来分配宽.例如浏览器宽度1800px,指定3列200px宽,结果为分配为3列600px宽,忽略200宽指定值;如果指定宽度200px,未指定列数,则按宽度自动平分为9列
						<br>参考资料：<a href="http://wenku.baidu.com/view/76a20b60011ca300a6c3909d.html">替换/非替换块级/内联元素</a></span></li>
				<li><a href="">column-width</a>(Npx)<span>列宽</span></li>
				<li><a href="">column-count</a>(N)<span>列数</span></li>
				<li><a href="">column-gap</a>(Npx)<span>列间隔</span></li>
				<li><a href="">column-rule</a>(1px solid #ccc)<span>列间隔边框 1px solid #ccc <br>column-rule-style等同于border样式</span></li>
				<li><a href="">column-span</a>(N/all)<span>列横跨,适用于：除浮动和绝对定位之外的块级元素
						<br>是否横跨全部,all和none,不可设置数值非表格,此属性应设置在被应用多列属性的子元素上,多列无继承性,对于不想被继承多列的元素应写在多列父元素之外,而非去设置多列横跨.</span></li>
			</ul>
			<h4>[<span>+</span>] Box</h4>
			<ul style="display:none">
				<li><a href="">display:-webkit-box</a><span>旧手机浏览器<br><a href="http://www.w3cplus.com/css3/css3-flexbox-cheat-sheet.html">兼容处理</a></span></li>
				<li><a href="">-webkit-box-orient</a><span>设置或检索伸缩盒对象的子元素的排列方式。
					<br>horizontal：设置伸缩盒对象的子元素从左到右水平排列
					<br>vertical：设置伸缩盒对象的子元素从上到下纵向排列
					<br>inline-axis：设置伸缩盒对象的子元素沿行轴排列
					<br>block-axis：设置伸缩盒对象的子元素沿块轴排列
				</span></li>
				<li><a href="">-webkit-box-pack</a><span>设置或检索伸缩盒对象的子元素的对齐方式。
					<br>start：设置伸缩盒对象的子元素从开始位置对齐（大部分情况等同于左对齐，受）
					<br>center：设置伸缩盒对象的子元素居中对齐
					<br>end：设置伸缩盒对象的子元素从结束位置对齐（大部分情况等同于右对齐）
					<br>justify：设置或伸缩盒对象的子元素两端对齐</span></li>
				<li><a href="">-webkit-box-align</a><span>设置或检索伸缩盒对象的子元素的对齐方式。
					<br>start：设置伸缩盒对象的子元素从开始位置对齐
					<br>center：设置伸缩盒对象的子元素居中对齐
					<br>end：设置伸缩盒对象的子元素从结束位置对齐
					<br>baseline：设置伸缩盒对象的子元素基线对齐
					<br>stretch：设置伸缩盒对象的子元素自适应父元素尺寸</span></li>
				<li><a href="">-webkit-box-flex</a><span>使用浮点数指定对象所分配其父元素剩余空间的比例。
				</span></li>
				<li><a href="">-webkit-box-flex-group</a><span>用整数值来定义伸缩盒对象的子元素所在的组。</span></li>
				<li><a href="">-webkit-box-ordinal-group</a><span>用整数值来定义伸缩盒对象的子元素显示顺序。</span></li>
				<li><a href="">-webkit-box-direction</a><span>设置或检索伸缩盒对象的子元素的排列顺序是否反转。normal | reverse</span></li>
				<li><a href="">-webkit-box-lines</a><span>设置或检索伸缩盒对象的子元素是否可以换行显示。single | multiple</span></li>
			</ul>
		</div>
	</div>
</div>