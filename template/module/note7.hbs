<div class="u-col">
	<div class="u-block">
		<h3>布局II<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>-</span>] 盒模型</h4>
			<ul>
				<li><a href="">Standards/Quirks Mode</a><span>
					HTML文档根据文档顶部的doctype声明来决定渲染模式，有<b>标准模式（Standards Mode）</b>与<b>怪异模式（Quirks mode，或叫做混杂模式）</b>两种模式。
					<br />IE5及以前默认总是表现为怪异模式，IE6~IE8遇到非正常声明或特定声明时也会进入怪异模式。
					<br />否则，如果有正确声明doctype并在顶端，则默认进入标准模式，即包括HTML5声明在IE6~IE8，也会进入标准模式，而非一定需要HTML4长长的声明。
					<br />而许多现代浏览器即使是怪异模式，表现也和标准模式是一致的。
					<br />
					<br />IE6+进入怪异模式的条件：
					<br />1.IE6~IE8没有doctype的页面是在怪异模式下渲染。
					<br />2.在文档类型定义之前出现非空格和换行字符，浏览器也会激活怪异模式。
					<br />3.除上述两种情况外，有一些特殊声明时用来特定激活怪异模式的。
					<br />具体见下表，删减至只考虑中国市场常用浏览器（来自<a href="https://hsivonen.fi/doctype/">《Activating Browser Modes with Doctype》</a>）
					<br /><a href="http://www.cnblogs.com/iruxu/p/html-doctype_and_box-model.html">参考资料</a>
					<br /><b>标准模式与怪异模式下导致的和模型区别：</b>
					<br />需要知道的是，盒模型差异是两种模式导致的最重要的区别之一，但是IE一些其他的BUG，即使是在标准模式下，仍然需要通过HACK解决，而并非处于标准模式下则没有BUG。
					<br />Box model ：标准模式width=content，怪异模式width=content+padding+border
					<br />例外：即使是标准模式下,button总是应用border-box,现代浏览器为了表现一致,默认添加了box-sizing:border-box属性，故在button的高度上仍然要考虑border而影响的高度,即设置height=height+border*2。
					<br />另外，button在现代浏览器中总是表现为基于垂直对齐，在IE7~8中表现为顶部对齐，在IE6中表现为基线对齐，故需要设置vertical-align:middle初始化让所有表现一致。
					<br /><a href="http://www.quirksmode.org/css/quirksmode.html">参考自《Quirks mode and strict mode》查阅更多区别</a>
				</span></li>
				<li><a href="">box-sizing</a>
					<span>
					<b>content-box</b>：padding和border不被包含在定义的width和height之内。对象的实际宽度等于设置的width值和border、padding之和，即 ( Element width = width + border + padding ) 此属性表现为标准模式下的盒模型。 
					<br>
					<b>border-box</b>：padding和border被包含在定义的width和height之内。对象的实际宽度就等于设置的width值，即使定义有border和padding也不会改变对象的实际宽度，即 ( Element width = width ) 此属性表现为怪异模式下的盒模型。 
					</span>
				</li>
				<li><a href="">display</a>
					<span>
						完整参考资料：<a href="http://www.w3.org/TR/css-display/">W3C</a>
						<br>当元素float,fixed,abosulte或者为根元素时,总是表现为块级元素(但并不会宽度占据100%,而是根据自己内容扩展,正确理解成inline-block?但又不完全是,由于float的性质为包裹)
						<table border="1" cellspacing="0" cellpadding="2">
							<tbody>
							<tr>
							<td valign="top">none</td>
							<td valign="top">隐藏对象,不保留物理空间</td>
							</tr>
							<tr>
							<td valign="top">inline</td>
							<td valign="top">内联元素 a,span,文本格式化(b,strong,i,em,sub,sup)</td>
							</tr>
							<tr>
							<td valign="top">block</td>
							<td valign="top">块级元素 div,p,h1~h6,h5,form,ul,ol新元素</td>
							</tr>
							<tr>
							<td valign="top">inline-block</td>
							<td valign="top">img,表单控件(input,button,textarea,label)</td>
							</tr>
							<tr>
							<td valign="top">list-item</td>
							<td valign="top">列表项目li</td>
							</tr>
							<tr>
							<td valign="top">table</td>
							<td valign="top">块级元素级的表格table,表格内部元素表现为对应的table-cell等。
							<br />table-caption | table-cell 
							<br />table-row | table-row-group 
							<br />table-u-column | table-u-column-group
							<br />table-footer-group | table-header-group</td>
							</tr>
							<tr>
							<td valign="top">inline-table</td>
							<td valign="top">内联元素级的表格</td>
							</tr>
							<tr>
							<td valign="top">flex</td>
							<td valign="top">弹性伸缩盒</td>
							</tr>
							<tr>
							<td valign="top">box</td>
							<td valign="top">inline-box,块/内联块级弹性伸缩盒（旧）</td>
							</tr>
							<tr>
							<td valign="top">flex</td>
							<td valign="top">inline-flexbox,块/内联块级弹性伸缩盒（新）</td>
							</tr>
							<tr>
							<td valign="top">run-in</td>
							<td valign="top">根据上下文决定对象是内联对象还是块级对象</td>
							</tr>
							</tbody>
						</table>
					</span>
				</li>
				<li><a href="">zoom</a>
					<span>设置或检索对象的缩放比例,normal实际尺寸,1.x浮点数,120%百分比.
						<br />1.可局部用于响应式设计改变DOM尺寸，会有偏移错位（以像素起点对齐变换）
						<br>2.可用于触发IE6的haslayout,拥有haslayout属性的层会自动管理其宽高,除非设置overflow否则宽高会自动扩展.
						<br />现代浏览器会溢出显示,但自身宽高不变.
					</span>
				</li>
				<li>
					<a href="">(hasLayout)</a>
					<span>
						<a href="http://baike.baidu.com/view/2945869.htm?fr=aladdin">详细文档</a>
						<br />触发haslayout的条件：
						<br />IE6: 
						<br />* display: inline-block
						<br />* float: (left 或 right)
						<br />* position: absolute
						<br />* width: (任何值除了auto)
						<br />* height: (任何值除了auto)
						<br />* writing-mode: tb-rl
						<br />* zoom: (除 normal 外任意值)
						<br />IE7:（额外）
						<br />* min-height: (任意值)
						<br />* max-height: (除 none 外任意值)
						<br />* min-width: (任意值)
						<br />* max-width: (除 none 外任意值)
						<br />* overflow: (除 visible 外任意值)
						<br />* overflow-x: (除 visible 外任意值)
						<br />* overflow-y: (除 visible 外任意值)
						<br />* position: fixed
					</span>
				</li>
				<li>
					<a href="">(BFC)</a>
					<span>
						block fomatting context<a href="http://www.w3.org/TR/CSS21/visuren.html#block-formatting">详细文档</a>
						<br>BFC会阻止垂直外边距（margin-top、margin-bottom）折叠
						<br>BFC不会重叠浮动元素
						<br>BFC可以包含浮动
						<br>触发BFC条件
						<br>* 根元素,fieldset
						<br>* float的值不为none
						<br>* overflow的值不为visible
						<br>* display的值为inline-block、table-cell、table-caption、flex、inline-flex
						<br>* position的值为absolute或fixed
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>] 表现</h4>
			<ul>
				<li>display:<a href="">inline-block</a><span>
						1.IE6-7支持inline元素转换成inline-block，但不支持block元素转换成inline-block，所以非inline元素在IE6,7下要转换成inline-block，需先转换成inline，然后触发hasLayout，以此来获得和inline-block类似的效果；
						<br>解决方案：
						<br>div{display:inline-block;*display:inline;*zoom:1;}
						<br />2.默认inline-block元素之间默认会有间隔,是由于html元素间200B空格导致的(根据上下文字体大小有差异),可以通过连接html元素,或注释,或分行,及其他方式去掉.(浮动亦可,但浮动无法制作横向布局)
						<br /><a href="http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/">详细参考资料</a>
						<br />3.禁止换行还需要设置white-space:nowrap制作横向滚动效果.
				</span></li>
				<li>display:<a href="">table-cell</a><span>
					特点：
					<br />1.table-cell有类似inline-block的可并行性
					<br />2.表格单元格宽度根据内容扩展，自行设置无效。
					<br />3.表格单元格同行元素总是等高。
					<br />注意：
					<br />1.IE8+有效
					<br />2.设置了display:table-cell的元素对宽度高度敏感，【对margin值无反应】，响应padding属性
					<br />3.display:table-cell与float:left或是position:absolute属性尽量不用同用
					<br />作用：
					<br />1.可以通过设置vertical-align:middle内容垂直居中
					<br />2.可用于宽度自适应布局，因为单元格本质宽度即由内容宽度决定。注意设置vertical-align:top
					<br />hack处理display:table-cell; width:2000px;*width:auto;*zoom:1;
					<br />3.可用于等高布局，即使不设置高度也会与同行元素等高。
					<br />hack处理display:table-cell; width:30%; margin-bottom:-100px; *padding-bottom:110px;*float:left;
					<br /><a href="http://www.zhangxinxu.com/wordpress/2010/10/%E6%88%91%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8Ddisplaytable-cell%E7%9A%84%E5%BA%94%E7%94%A8/">参考资料</a>
					<br />4.自适应.cell{display:table-cell;*display:inline-block;} //table-cell content + auto side*2
					<br />5.td中让元素垂直居中对齐，是对元素img设置y而非父级 ，文字则设置父级
					</span></li>
			</ul>
			<h4>[<span>-</span>] 尺寸</h4>
			<ul>
				<li><a href="">calc()</a><span>长度计算,width:calc(100% - 50px) <strong>中间必须有空格！</strong></span></li>
				<li><a href="">width</a><span>宽度
					<br />1.IE6 BUG:当元素设置百分比宽高时,自动继承父级,宽度由于block默认占比100%,即总是不会缺失,但若父级高度自适应,则IE6会继续向上级继承,而现代浏览器则继承当前父级内容实际产生的高度.
					<br />2.IE6 BUG:1像素BUG,尽量设置尺寸为偶数或不设置<a href="http://www.yuzi.me/Share/ie6qishubug.html">参考资料</a>
					<br />3.子元素设置100%宽高时不包含父元素的padding!当父元素有padding时,因设置固定尺寸或修改父级模型!
					<br />4.width:auto 现代浏览器中表示根据内容自动扩展,而IE6-7表示占满父级
					<br />5.IE6-7对宽度的处理略有差异，特别是IE7下有许多离奇BUG，取百分比小数时，尽量只取到1位或取整
				</span></li>
				<li><a href="">height</a><span>高度
					<br />1.如果要给元素定义100%高度，必须要明确定义它的父级元素的高度，如果你需要给元素定义满屏的高度，就得先给html和body定义height:100%; <a href="http://www.cnblogs.com/clare-zhang/archive/2011/08/26/2154220.html">参考资料</a>
					<br />2.对于绝对定位拉伸的元素，内部元素可以直接使用百分比
					<br />3.IE6-7中浮动创建的自适应布局,需要主动给定父级高度，否则绝对定位的元素无法正常定位。
					<br />4.<a href="http://www.zhangxinxu.com/wordpress/2015/02/different-height-100-height-inherit/">height:inherit</a>的用法(IE8+)
					</span></li>
				<li><a href="">min-width/height</a><span>最小宽高
					<br />ie7-8支持,仅ie6不支持
					<br />IE6触发haslayout时,总是会自动管理其内容的宽高,自适应增长
					<br />故可以写成.test{min-height:200px;_height:200px;}
					</span></li>
				<li><a href="">max-width/height</a><span>最大宽高
					<br />1.ie7-8支持,仅ie6不支持
					</span></li>
			</ul>
			<h4>[<span>-</span>] 边框</h4>
			<ul>
				<li><a href="">border</a><span>[简写]border:1px solid #ccc;
					<br />[0px height]元素的边框位置IE6 BUG！
					<br /><b>当引入一个透明边框时,ie6+会增长内部空间至边框区域(背景色,不含内容),ie6显示黑色边框.</b>
					<hr>border-width宽度：
					<br>指定一个宽度,此宽度在双线时等于其间隔.
					<hr>border-style样式：
					<br>none：无轮廓（等价border-width:0）
					<br>dotted：点状轮廓。IE6下显示为dashed效果
					<br>dashed：虚线轮廓。
					<br>solid：实线轮廓
					<br>double：双线轮廓。两条单线与其间隔的和等于指定的border-width值
					<br>groove：3D凹槽轮廓。
					<br>ridge：3D凸槽轮廓。
					<br>inset：3D凹边轮廓。
					<br>outset：3D凸边轮廓。
					<hr>border-color颜色：
					<br>如果想在hover上做边框显示不发生抖动,应将默认状态添加如1px solid transparent
					<br>三角制作：<a href="http://apps.eky.hk/css-triangle-generator/zh-hant">在线生成</a>（利用宽高0,设置1个夹角边框大值）
					<br />arrow生成：<a href="http://cssarrowplease.com/">GO TO!</a>
					<br /><img src="image/triangle.png" alt="" />
					</span></li>
				<li><a href="">border-top</a><span>
					单边:border-top/border-bottom/border-left/border-right
					<br>取消某一边:border:1px solid #ccc;border-bottom:none;
					</span></li>
				<li><a href="">border-width/color/style</a><span>
					border-width/color/style:上 右 下 左;4个值
				</span></li>
				<li><a href="">border-radius</a>
					<span>[边框圆角简写]border-radius:5px 4px 3px 2px;
					<br>四个半径值分别是左上角、右上角、右下角和左下角,可以设置百分比.
					<br />提供2个参数，2个参数以“/”分隔，每个参数允许设置1~4个参数值，第1个参数表示水平半径，第2个参数表示垂直半径，如第2个参数省略，则默认等于第1个参数（顺时针顺序）
					<br />border-radius: 15px 5px 25px 5px / 3px 5px 10px 15px;
					<br>改变形状：
					<br>正方形->圆：radius=width|height/2
					<br>叶子-> 左上+右下,注意书写方式与简写代表
					<br>半圆->宽度设为高度的一半，并且也只设置左上角和左下角的半径
					<br />饼->四分之一圆的实现方法是把高度和宽度设置为相等，只设置一个圆角，其半径等于高度或宽度
					<br />用radius画形状<a href="http://www.xincss.com/?p=221">参考资料</a>
					<br>在线生成：<a href="http://www.css3maker.com/border-radius.html">GO TO!</a>
					<hr>
					扩展:
					<br>1.<a href="http://stackoverflow.com/questions/17464167/css-image-hover-inside-border-radius">chrome hover radius bug</a>
					</span></li>
				<li><a href="">border-top-left-radius</a><span>
					单角圆角,注意书写格式,先写top/bottom后写left/right
					<br>提供2个参数，2个参数以空格分隔，每个参数允许设置1个参数值，第1个参数表示水平半径，第2个参数表示垂直半径，如第2个参数省略，则默认等于第1个参数
					<br />border-top-left-radius:5px 10px。不用“/”分割
					</span></li>
				<li><a href="">border-image</a>
						<span>border-image:url(路径不需要引号) 80 80 80 80 round/stretch
						<br>在线图片边框生成：<a href="http://iruxu.com/to-be-css/borderimage/index.htm">GO TO!</a>
						<br /><a href="https://github.com/AlloyTeam/Mars/blob/master/solutions/border-1px.md">移动端1像素边框处理</a>
						</span></li>
				<li><a href="">outline</a><span>
						轮廓边框,在border之外,chrome有焦点样式.另可作为定位参考或特殊动画
						<br />不允许类似border属性那样能将自身拆分为border-top..
						<br />IE6-7不支持,IE8支持
						</span></li>
				<li><a href="">outline-offset</a>
						<span>用长度值来定义轮廓偏移。允许负值。
						<br />0是以border边界作为参考点的，正值从border边界往外延，负值从border边界往里缩.
						<br />可用outline来制作一些边框动画但又不改变原大小并非真正边框的改变(因为边框大小改变必然内容需要改变)</span></li>
			</ul>
			<h4>[<span>-</span>] 层属性</h4>
			<ul>
				<li><a href="">padding</a>
					<span>内部补白
					<br>设置：
					<br />[简写]依次设置上右下左padding:1px 2px 3px 4px;
					<br>[单边]padding-top/right/bottom/left
					<br>[缩写]如果只提供一个，将用于全部的四边;如果提供两个，第一个用于上、下，第二个用于左、右;如果提供三个，第一个用于上，第二个用于左、右，第三个用于下。 
					<br>[生效]非替代(non-Replaced)行内元素可以使用该属性设置左、右两边的内补丁；若要设置上、下两边的内补丁，必须先使该对象表现为块级或内联块级。即内联元素(a等)设置padding水平有效,垂直无效,除非转换display值。margin同理。
					<br>注意：
					<br />1.默认背景图片的平铺是包含在padding区域的
					<br />2.padding生效在伪对象之外。
					<br />3.%比值<b>水平（默认）书写模式下，参照其包含块 width 进行计算，其它情况参照包含块 height，margin同理</b><a href="http://www.ituring.com.cn/article/64581">参考资料</a>绝对定位的top/left等百分比按照父级对应尺寸。
					<br />4.IE7会胡乱继承padding,自适应宽高的地方必要应设置父级宽高并设置隐藏。<br>
					5.当设置类似必须overflow但内部有元素偏移时，可用padding替代margin。
					</span></li>
				<li><a href="">margin</a><span>外部补白.
					<br>margin-left/right:num/%/auto. 当margin-left/right为auto时水平居中
					<br /><b>百分比:水平（默认）书写模式下，参照其包含块 width 进行计算，其它情况参照 height ，可以为负值</b>
					<br>1.内联元素垂直无效
					<br>非替代(non-Replaced)行内元素可以使用该属性设置左、右两边的外补丁；若要设置上、下两边的外补丁，必须先使该对象表现为块级或内联块级。 
					<br>2.外边距合并 <a href="http://www.w3school.com.cn/css/css_margin_u-collapsing.asp">参考文档</a>
					<br>当一个元素出现在另一个元素上面时，第一个元素的下外边距与第二个元素的上外边距会发生合并。
					<br>当一个元素包含在另一个元素中时【假设没有内边距或边框把外边距分隔开】，它们的上和/或下外边距也会发生合并。
					<br>假设有一个空元素，它有外边距，但是没有边框或填充。在这种情况下，上外边距与下外边距就碰到了一起，它们会发生合并
					<br>如果这个外边距遇到另一个元素的外边距，它还会发生合并
					<br>【margin折叠扩展】：
					<br>margin折叠只发生在块级元素上，且只发生在垂直上 
					<br>浮动元素的margin不与任何margin发生折叠；
					<br>绝对定位元素的margin不与任何margin发生折叠； 
					<br>设置了display:inline-block的元素不发生折叠； 
					<br>设置了属性overflow且值不为visible的块级元素，将不与它的子元素发生margin折叠； 
					<br>根元素的margin不与其它任何margin发生折叠,指html而非body
					<br>IE6-7中,如果父元素触发了haslayout,则不会发生折叠
					<br>3.margin负值应用
					<br>margin-top/left：会改变自身文本流位置,后面的元素依次顶上.
					<br>margin-bottom/right；不改变自身文本流位置,改变后面元素的文本流位置向前移
					<br>百分比适应下的边框应用,hover状态的-双倍border应用.
					<br><b>当负值margin向上移动文本流时，若上方元素设置了相对定位，则会覆盖在本元素之上，理解成z-index成为1.需要将自身也设置pr;</b>
					<br>4.边距非法继承
					<br>IE6有时候会沿袭继承上上级的一些属性,ie6无法识别.class.class双class样式值,注意单独补充设置.
					<br>如默认设置了父级margin:val 在子.class上清除.避免写成.class.class
					<br>【BUG】：
					<br>1.IE6双倍margin
					<br>对块状容器元素设置了float和与float相同方向的margin值就会出现双倍margin
					<br>解决方法：设置BUG元素display:inline;
					<br>由于当元素float的时候，display样式的值就会自动转换为“block”，无论display先前设置的属性是什么都会失去效果，不会影响块级特性。
					<br>2.当上一个元素为绝对定位元素,IE6~7下margin-top会失效，根据情况设置padding或自身也设置为绝对定位
				</span></li>
				<li><a href="">visibility</a><span>			
					此属性为隐藏的对象保留其占据的物理空间如果希望对象为可视，其父对象也必须是可视的。 
					<br>visible： 设置对象可视 
					<br>hidden： 设置对象隐藏 
					<br>u-collapse： 主要用来隐藏表格的行或列。隐藏的行或列能够被其他内容使用。对于表格外的其他对象，其作用等同于hidden。
					<hr>使得一个DOM元素不显示在浏览器可视范围内的方法：
					<br />display:none
					<br />visibility:hidden
					<br />width:0;height:0;opacity:0;z-index:-1000
				</span></li>
				<li><a href="">overflow</a><span>溢出
					<br>使overflow生效需要指定尺寸!而非自适应尺寸
					<br>visible： 对溢出内容不做处理，内容可能会超出容器。 
					<br>hidden： 隐藏溢出容器的内容且不出现滚动条。 
					<br>scroll： 隐藏溢出容器的内容，溢出的内容将以卷动滚动条的方式呈现。 
					<br>auto： 当内容没有溢出容器时不出现滚动条，当内容溢出容器时出现滚动条，按需出现滚动条。此为body对象和textarea的默认值。
					<br>在IE6/7中，overflow无法正确的隐藏有相对定位position:relative;的子元素。解决方法就是给外包容器.wrap加上position:relative;。
					<br>扩展：
					<br><a href="http://iruxu.com/fixbug/ie78scroll">IE78scroll无法用滚轮滚动bug</a></span></li>
				<li><a href="">overflow-x</a><span>横向溢出处理</span></li>
				<li><a href="">overflow-y</a><span>纵向溢出处理
					<br />对html元素设置overflow:hidden;可隐藏浏览器滚动条,通过js设置让body,html滚动</span></li>
			</ul>
			<h4>[<span>-</span>] 定位</h4>
			<ul>
				<li><a href="">float</a><span>
					<a href="http://www.zhangxinxu.com/wordpress/?p=583">浮动详解</a> <a href="http://www.imooc.com/view/121">视频版</a>
					<br>【特性】：
					<br>1.浮动内置设置：设置了float的元素则自动转换display为block.只有块级元素具有宽高等特性.
					<br>2.浮动原理1.环绕特性本质，2.脱离文本流特性
					<br>3.与非浮动元素的margin问题：如果浮动并未被闭合处理，下级非浮动元素默认还是以“环绕”浮动元素，其margin会作用在空的区域，此时应在浮动元素上设置margin
					<br>【浮动闭合与BFC】 <a href="http://www.cnblogs.com/dolphinX/p/3508869.html">参考文档</a>
					<br>1.清除浮动解决方案：
					<br>.clearfix:after {content:"\200B"; display:block; height:0; clear:both; }
					<br>.clearfix:after {content:"";display:table;clear:both;}
					<br>.clearfix { *zoom:1; }
					<br><a href="http://www.w3cfuns.com/article-1287-1.html">完整参考资料</a>
					<br>2.BFC条件：
					<br>float为 left|right
					<br>overflow为 hidden|auto|scroll
					<br>display为 table-cell|table-caption|inline-block
					<br>position为 absolute|fixed
					<br>【IE BUG】
					<br>1:IE6 双倍margin BUG
					<br>对块状容器元素设置了float和与float相同方向的margin值就会出现双倍margin
					<br>解决方法：设置BUG元素：display:inline;
					<br>由于当元素float的时候，display样式的值就会自动转换为“block”,无论display先前设置的属性是什么都会失去效果，不会影响块级特性。
					<br>2.IE6下3像素bug：
					<br>当浮动元素与非浮动元素相邻时,会发生3像素间隙,可设置浮动元素_margin-right:-3px;或使非浮动元素浮动.
					<br><a href="http://pewper.blog.163.com/blog/static/2970860820126261195866/">详细参考资料</a>
					<br>中间列自适应布局方案:左右各浮动（层级需要都在不浮动之前！），需要解决3px bug
					<br>3.IE6-7浮动自适应布局
					<br>IE6-7中浮动创建的自适应布局,需要主动给定父级高度，否则绝对定位的元素无法正常定位。
				</span></li>
				<li><a href="">clear</a><span>清除浮动：none,left,right,both
					<br />清除浮动只影响自己，而不影响其他元素；
					<br />对于CSS的清除浮动(clear)，一定要牢记：这个规则只能影响使用清除的元素本身，不能影响其他元素。
					<br /><a href="http://www.dabaoku.com/jiaocheng/wangye/css/2013040918035.shtml">参考资料1</a>
					<br /><a href="http://www.zhangxinxu.com/wordpress/2014/06/understand-css-clear-left-right-and-use/">参考资料2</a>
					</span></li>
				<li><a href="">position:static</a><span>对象遵循常规流</span></li>
				<li><a href="">position:relative</a><span>
					相对定位：对象遵循常规流，并且参照自身在常规流中的位置通过top，right，bottom，left属性进行偏移时不影响常规流中的任何元素
					<br>1.相对定位不同于margin-left/top,不会改变原先文档流,html后者层级默认仍然比前者高
					<br>2.相对定位可设置z-index改变层级
					</span></li>
				<li><a href="">position:absolute</a><span>绝对定位：<a href="http://www.imooc.com/learn/192">【参考资料】</a>
					<br />特征：
					<br>1.对象脱离常规流,会在正常文档流之上,也可以通过z-index改为负值在正常流之下
					<br>2.使用top，right，bottom，left等属性进行绝对定位，坐标总是以最近的被定位的父级元素为基准,如没有则以window窗口.
					<br>3.盒子的偏移位置不影响常规流中的任何元素，其margin不与其他任何margin折叠。
					<br>4.当元素设置为绝对定位时,则该元素变为inline-block块级.（不再占据100%）
					<br>特殊用法：
					<br>1.(未定义坐标)：绝对定位的元素，在top，right，bottom，left属性未设置时，会紧随在其前面的兄弟元素之后，但在位置上不影响常规流中的任何元素。如无兄弟元素则贴在父元素起点。<b>即绝对定位在不赋值位置属性时，可作为脱离文档流的相对定位。</b>
					<br />无依赖的绝对定位主要通过margin来实现位移.
					<br />可配合text-align+&nbsp；实现一些自动布局。
					<br />关于跟随性,默认会跟在图片的顶端,由于200B baseline对齐会错位,可通过注释或串联来规避
					<br>2.(未知/已知元素尺寸)：垂直/水平/双向居中,可设置绝对定位,并设置top+bottom:0 / left+right:0 / top+left+bottom+right:0,并设置对应方向margin:auto【IE8支持，6-7均不支持】
					<br>3.(已知元素尺寸)：垂直/水平/双向居中,可设置绝对定位,并设置单向距离(left:50% / top:50%),并设置margin-left/top:-尺寸的一半.【IE6支持】
					<br>4.(自适应宽高)：一个绝对定位元素,如未对其宽高进行设置,但对其对向方位值设置时,则认为宽高总是扩展值定位点.可利用作为自适应宽高.【IE8支持，6-7均不支持】
					<br>BUG：
					<br />1.IE6中,父元素区域会管理到内部包含的绝对定位元素范围.
					</span></li>
				<li><a href="">position:fixed</a><span>窗口定位：
					<br>对象脱离常规流，使用top，right，bottom，left等属性以窗口为参考点进行定位，当出现滚动条时，对象不会随着滚动。
					<br>HACK：
					<br>IE6不支持fixed定位，通过CSS表达式解决，<a href="http://www.cnblogs.com/hooray/archive/2011/05/20/2052269.html">完整参考资料</a>
					<br>平板下的fixed有Bug，使用绝对定位代替。
				</span></li>
				<li><a href="">top/bottom/left/right</a><span>配合定位属性进行定位,可为负值.
					<br />垂直居中一个图片
					<br />#container{display:table-cell;text-align:center;vertical-align:middle;}
					</span></li>
				<li><a href="">z-index</a><span>Z轴设定,可以为负值.
					<br>同一个层叠上下文中，层叠级别相同的两个元素，依据它们在HTML文档流中的顺序，写在后面的将会覆盖前面的。 
					<br>不同层叠上下文中，元素的显示顺序依据祖先的层叠级别来决定，与自身的层叠级别无关。 
					<br>在IE浏览器中，定位元素的z-index层级是相对于各自的父级容器，所以会导致z-index出现错误的表现。解决方法是给其父级元素定义z-index，有些情况下还需要定义position:relative。
					<br><a href="http://css.doyoe.com/properties/positioning/z-index.htm">实例参考</a>
				</span></li>
				<li><a href="">clip</a>
					<span>剪裁,【绝对定位元素】.
					<br>auto,不剪裁.rect(50px 20px 10px auto) auto为不剪裁.【上右下左】 
					<br /><a href="http://css.doyoe.com/properties/positioning/clip.htm">更多说明</a> 
					<br />只有为shape时才支持动画性,可做遮罩动画效果
					<br /><a href="http://www.w3cplus.com/css3/css-masking.html">webkit-mask-image:url(img.png)</a>
					</span></li>
			</ul>
			<h4>[<span>+</span>] 方案</h4>
			<ul style="display:none">
				<li><a href="">水平居中</a><span>
					1.自动margin(固定尺寸, .x(auto) )
					<br>只适用于水平切为块级元素,margin:0 auto;
					<br>2.text-align:center( 适用于inline/inline-block, .x )
					<br>现代浏览器只对inline/inline-block元素有效,且非绝对定位.IE6-7可对block元素有效(需指定尺寸)
					<br>3.绝对定位( 已知元素尺寸,ct(x,@width) )
					<br>设置绝对定位,left:50%,并设置margin-left:-尺寸的一半
					<br>4.绝对定位( 未知元素尺寸,.ct(x) )
					<br>设置绝对定位,并设置left:0;right:0;margin-left:auto;margin-right:auto; 【IE6不支持】
					<br>5.自动margin(伸缩尺寸,margin:x)
					<br>设置margin:value 对边相等margin值,对盒子宽高未设置则自动扩展宽高
				</span></li>
				<li><a href="">垂直居中</a><span>
					1.绝对定位( 已知元素尺寸,ct(y,@height) )
					<br>设置绝对定位,top:50%,并设置margin-top:-尺寸的一半
					<br>2.绝对定位( 未知元素尺寸,.ct(y) )
					<br>设置绝对定位,并设置top:0;bottom:0;margin-top:auto;margin-top:auto; 【IE6不支持】
					<br>3.table-cell
					<br>设置display:table-cell;vertical-align:middle;（子元素为inline或inline-block） 【IE6不支持】
					<br />4.display:-webkit-box;-webkit-box-align:center;(手机端<a href="http://css.doyoe.com/properties/flexible-box/box-align.htm"></a>)
				</span></li>
				<li><a href="">中央居中</a><span>
					1.绝对定位( 已知元素尺寸,ct(o,@width,@height) )
					<br>设置绝对定位,top:50%,left:50%,并设置margin-top:-尺寸的一半,margin-left:-尺寸的一半
					<br>2.绝对定位( 未知元素尺寸,.ct )
					<br>设置绝对定位,并设置top:0;bottom:0;left:0;right:0;margin:auto; 【IE6不支持】
					<br>3.自动margin(伸缩尺寸,margin:x)
					<br>设置margin:value 对边相等margin值,对盒子宽高未设置则自动扩展宽高
				</span></li>
				<li><a href="">尺寸兼容</a><span>
					1.hasLayout概念,ie6的自动管理,如不设置overflow总是自动扩展
					<br />2.当元素设置百分比宽高时,自动继承父级,宽度由于block默认占比100%,即总是不会缺失,但若父级高度自适应,则IE6会继续向上级继承,而现代浏览器则继承当前父级内容实际产生的高度.
					<br />3.IE6的1像素BUG,尽量设置尺寸为偶数或不设置<a href="http://www.yuzi.me/Share/ie6qishubug.html">参考资料</a>
					<br />4.IE6-7对百分比小数值例如33.33%解析不正确,因修正为*width:32%
				</span></li>
				<li><a href="">% + border</a><span>百分比尺寸下border的处理
					<br />1.margin:-2px（hover处理则增加双倍）
					<br />2.box-sizing
					<br />3.calc函数 ~"calc(100% - 50px)"
					<br />4.table布局,width=100%-50(无单位)
				</span></li>
				<li><a href="">自适应宽度</a><span>自适应宽度
					<br />1.margin:x val,由于默认block宽度占满100%,设置margin即占满剩余宽度【如side float则需要清除3px bug,可选择绝对定位】
					<br />2.绝对定位,不设置宽高,left:x起始点,right:x结束点.margin:auto.【IE6不兼容】如为相对浏览器窗口可表达式计算
					<br />3.calc函数 ~"calc(100% - 50px)"
					<br />4.table-cell,根据内容扩展,占满剩余父级空间
					<br />5.改table布局,使用width=100%-50(无单位)
				</span></li>
				<li><a href="">自适应高度</a><span>自适应高度
					<br />1.绝对定位,不设置宽高,top:x起始点,bottom:x结束点.margin:auto.【IE6不兼容】如为相对浏览器窗口可表达式计算
					<br />2.calc函数 ~"calc(100% - 50px)"
					<br />3.改table布局,使用height=100%-50(无单位)
				</span></li>
				<li><a href="">水平布局</a><span>水平布局方案
					<br />1.float
					<br />2.inline-block,需设置vertical-align:top,去除inline-block的200B空格.【IE6中要使不断行还必须指定父级高度！】
					<br />3.table-cell(总是等高最高的)【IE6不支持】
					<hr />
					<br />float:错乱,换行不低于上行最高值,不等高
					<br />inline-block:不会错乱,新行整齐,不等高
					<br />table-cell:不会错乱,同行元素必定等高
				</span></li>
			</ul>
		</div>
	</div>
</div>